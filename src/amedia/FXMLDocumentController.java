/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package amedia;

import java.io.File;
import java.net.URL;
import java.time.Duration;
import java.util.ResourceBundle;
import javafx.beans.InvalidationListener;
import javafx.beans.Observable;
import javafx.beans.binding.Bindings;
import javafx.beans.property.DoubleProperty;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.Slider;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import javafx.scene.media.MediaView;
import javafx.stage.FileChooser;


/**
 *
 * @author arjun
 */
public class FXMLDocumentController implements Initializable {
    @FXML
    private MediaView mediaView;
    
    @FXML
    private Label label;
    @FXML
    private Button button;
    private String filepath;
    private MediaPlayer mediaplayer;
    private Slider slider;
    private Slider seekslider;
    
    @FXML
    // Button generates an event known as ActionEvent and is handled by ActionListener interface
    //To handle the events generated by the components (either or hardware or software), Java introduced listeners
    private void handleButtonAction(ActionEvent event) {
        FileChooser fileChooser = new FileChooser();
        FileChooser.ExtensionFilter filter = new FileChooser.ExtensionFilter("Select a file(*.mp4)","*.mp4");
        fileChooser.getExtensionFilters().add(filter);
        File file = fileChooser.showOpenDialog(null);
        filepath = file.toURI().toString();
        
        if(filepath != null){
        Media media = new Media(filepath);
        mediaplayer = new MediaPlayer(media);
        mediaView.setMediaPlayer(mediaplayer);
          DoubleProperty width = mediaView.fitWidthProperty();
          DoubleProperty height = mediaView.fitWidthProperty();
          
          width.bind(Bindings.selectDouble(mediaView.sceneProperty(), "width"));
          height.bind(Bindings.selectDouble(mediaView.sceneProperty(), "height"));
          
          slider.setValue(mediaplayer.getVolume()* 100);
          slider.valueProperty().addListener(new InvalidationListener(){
              @Override
              public void invalidated(Observable observable){
                  mediaplayer.setVolume(slider.getValue()/100);
              }
          });
          
         
          
          
                  
          
          
        mediaplayer.play();
        }
        
        
    }  
        
    
    @FXML
    
    private void playVideo(ActionEvent event){
        mediaplayer.play();
        mediaplayer.setRate(1);
    }
    
    @FXML
    private void pauseVideo(ActionEvent event){
        mediaplayer.pause();
    }
    
 @FXML
    private void stopVideo(ActionEvent event){
        mediaplayer.stop();
    }
    
    @FXML
    private void fastVideo(ActionEvent event){
        mediaplayer.setRate(1.5);
    }
    
    @FXML
    private void fasterVideo(ActionEvent event){
        mediaplayer.setRate(2);
    }
    
    @FXML
    private void slowVideo(ActionEvent event){
        mediaplayer.setRate(.75);
    }
    
    @FXML
    private void slowerVideo(ActionEvent event){
        mediaplayer.setRate(.5);
    }
    
    @FXML
    private void exitVideo(ActionEvent event){
        System.exit(0);
    }
    
    
    
    @Override
    public void initialize(URL url, ResourceBundle rb) {
        // TODO
    }    
    

}
